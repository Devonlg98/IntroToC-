1.Convert the following from decimal to binary/vice versa
1= 1
42= 010101 101010
256 = 10000000
64 = 0000001 1000000
14 = 0111 11100
4,294,967,296= 100000000000000000000000000000000


100000000 = 2 4 8 16 32 64 128 256 
10101010 = 1 2 5 10 21 42 double add 1
11110000 = 1 3 7 15 30 60 120 240
11001100= 1 3 6 12 25 51 102 204

3.Solve these binary arithmetic problems
111+111		=	7+7 = 14
1010+1010	=	10+10 = 20
11101+1010	=	25+10 = 30
1101-11		=	13+3 = 16
10001-100	=	17-4 = 13
101x10		=	5x2 = 10
1011x11		=	11x3 = 33
1101/11		=	13/3= 4.333

4.In many places, numbers stored in computers are displayed as hexadecimal (base 16). What
advantages do hex numbers have over decimal and binary numbers respectively when
displaying numbers stored in a computer?

It's a lot more compact, harder to make mistakes

5.Using Two's complement convert the following between decimal and binary (for binary use 1
signed byte)
10000000 = 1111111 1 3 7 15 31 63 127 +1 = -128
10101010 = 1010101 1 2 5 10 21 42 85 +1 = -86
11110000 = 0001111 1 3 7 15 +1 = -16
11001100 = 0110011 1 3 6 12 25 51 +1 = -52
10101001 = 1010110 1 2 5 10 21 43 86 +1 = -87
-16 = 00001000 00010000 inv 11101111 carry the one 11110000 
-18 = 00010010 inv 11101101 add 1 11101110
128 = 00000001 10000000 01111111 10000000 out of range of 127
-128= 00000001 10000000 01111111 10000000
-123= 11011110 01111011 10000100 10000101

6. What do each of these evaluate to?
11111 | 11111 11111
11111 ^ 11111 00000
10101 & 11111 10101
10101 | 11111
00000 ^ 11111
1<<3	0000 1000
100>>2	0000 0100= 0000 0001
~10101	0000 1010
100<<1	0000 0100= 0001 0000
1010>>1	0000 1010= 0000 0101
~11111	0001 1111= 1110 0000

7. A true/false value can be stored in a single bit – zero for false, one for true. However, the
Boolean type in C is a full byte big – 8 bits. This means it is possible to store 8 bits in a single
byte. Using bitwise operators, how might you

1.Set an single bit to 0
use Bitwise AND, and copy the current bit, changing only the value of the one you want to change to zero
example 0110 0101
       &0110 0001 result = 0110 0001

OR

use BitWise XOR, and put a 1 where I'd like to change the previous bit
example 0110 0101
       ^0000 0100 result = 0110 0001


2.Set an single bit to 1
use Bitwise OR, and put a 1 where I'd like to change the previous bit
example 0110 0101
       |0001 0000 result = 0111 0101


3.Check the value of a single bit
Use Bitwise AND and put a 1 where you'd like to check for a bit's value
example 0110 0101
       &0000 1001 result = 0000 0001
this checks  ^  ^ these spots and if the starting value was zero it will print zero, if it's one then it prints one.

8.in snl
